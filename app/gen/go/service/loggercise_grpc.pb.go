// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: loggercise.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggerciseClient is the client API for Loggercise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerciseClient interface {
	UpsertWorkout(ctx context.Context, in *UpsertWorkoutRequest, opts ...grpc.CallOption) (*WorkoutResponse, error)
	GetWorkouts(ctx context.Context, in *GetWorkoutsRequest, opts ...grpc.CallOption) (*WorkoutResponse, error)
	DeleteWorkout(ctx context.Context, in *WorkoutRequest, opts ...grpc.CallOption) (*WorkoutResponse, error)
	UpsertExercise(ctx context.Context, in *UpsertExerciseRequest, opts ...grpc.CallOption) (*ExerciseResponse, error)
	GetExercises(ctx context.Context, in *WorkoutRequest, opts ...grpc.CallOption) (*ExerciseResponse, error)
	DeleteExercise(ctx context.Context, in *ExerciseRequest, opts ...grpc.CallOption) (*ExerciseResponse, error)
	UpsertSet(ctx context.Context, in *UpsertSetRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*Empty, error)
	UpsertLift(ctx context.Context, in *UpsertLiftRequest, opts ...grpc.CallOption) (*LiftResponse, error)
	GetLifts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LiftResponse, error)
	GetMuscles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MusclesResponse, error)
}

type loggerciseClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerciseClient(cc grpc.ClientConnInterface) LoggerciseClient {
	return &loggerciseClient{cc}
}

func (c *loggerciseClient) UpsertWorkout(ctx context.Context, in *UpsertWorkoutRequest, opts ...grpc.CallOption) (*WorkoutResponse, error) {
	out := new(WorkoutResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/UpsertWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) GetWorkouts(ctx context.Context, in *GetWorkoutsRequest, opts ...grpc.CallOption) (*WorkoutResponse, error) {
	out := new(WorkoutResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/GetWorkouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) DeleteWorkout(ctx context.Context, in *WorkoutRequest, opts ...grpc.CallOption) (*WorkoutResponse, error) {
	out := new(WorkoutResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/DeleteWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) UpsertExercise(ctx context.Context, in *UpsertExerciseRequest, opts ...grpc.CallOption) (*ExerciseResponse, error) {
	out := new(ExerciseResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/UpsertExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) GetExercises(ctx context.Context, in *WorkoutRequest, opts ...grpc.CallOption) (*ExerciseResponse, error) {
	out := new(ExerciseResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/GetExercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) DeleteExercise(ctx context.Context, in *ExerciseRequest, opts ...grpc.CallOption) (*ExerciseResponse, error) {
	out := new(ExerciseResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/DeleteExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) UpsertSet(ctx context.Context, in *UpsertSetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/UpsertSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/DeleteSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) UpsertLift(ctx context.Context, in *UpsertLiftRequest, opts ...grpc.CallOption) (*LiftResponse, error) {
	out := new(LiftResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/UpsertLift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) GetLifts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LiftResponse, error) {
	out := new(LiftResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/GetLifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerciseClient) GetMuscles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MusclesResponse, error) {
	out := new(MusclesResponse)
	err := c.cc.Invoke(ctx, "/loggercise.loggercise/GetMuscles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerciseServer is the server API for Loggercise service.
// All implementations must embed UnimplementedLoggerciseServer
// for forward compatibility
type LoggerciseServer interface {
	UpsertWorkout(context.Context, *UpsertWorkoutRequest) (*WorkoutResponse, error)
	GetWorkouts(context.Context, *GetWorkoutsRequest) (*WorkoutResponse, error)
	DeleteWorkout(context.Context, *WorkoutRequest) (*WorkoutResponse, error)
	UpsertExercise(context.Context, *UpsertExerciseRequest) (*ExerciseResponse, error)
	GetExercises(context.Context, *WorkoutRequest) (*ExerciseResponse, error)
	DeleteExercise(context.Context, *ExerciseRequest) (*ExerciseResponse, error)
	UpsertSet(context.Context, *UpsertSetRequest) (*Empty, error)
	DeleteSet(context.Context, *DeleteSetRequest) (*Empty, error)
	UpsertLift(context.Context, *UpsertLiftRequest) (*LiftResponse, error)
	GetLifts(context.Context, *Empty) (*LiftResponse, error)
	GetMuscles(context.Context, *Empty) (*MusclesResponse, error)
	mustEmbedUnimplementedLoggerciseServer()
}

// UnimplementedLoggerciseServer must be embedded to have forward compatible implementations.
type UnimplementedLoggerciseServer struct {
}

func (UnimplementedLoggerciseServer) UpsertWorkout(context.Context, *UpsertWorkoutRequest) (*WorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWorkout not implemented")
}
func (UnimplementedLoggerciseServer) GetWorkouts(context.Context, *GetWorkoutsRequest) (*WorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkouts not implemented")
}
func (UnimplementedLoggerciseServer) DeleteWorkout(context.Context, *WorkoutRequest) (*WorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkout not implemented")
}
func (UnimplementedLoggerciseServer) UpsertExercise(context.Context, *UpsertExerciseRequest) (*ExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertExercise not implemented")
}
func (UnimplementedLoggerciseServer) GetExercises(context.Context, *WorkoutRequest) (*ExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercises not implemented")
}
func (UnimplementedLoggerciseServer) DeleteExercise(context.Context, *ExerciseRequest) (*ExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedLoggerciseServer) UpsertSet(context.Context, *UpsertSetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSet not implemented")
}
func (UnimplementedLoggerciseServer) DeleteSet(context.Context, *DeleteSetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSet not implemented")
}
func (UnimplementedLoggerciseServer) UpsertLift(context.Context, *UpsertLiftRequest) (*LiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLift not implemented")
}
func (UnimplementedLoggerciseServer) GetLifts(context.Context, *Empty) (*LiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLifts not implemented")
}
func (UnimplementedLoggerciseServer) GetMuscles(context.Context, *Empty) (*MusclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMuscles not implemented")
}
func (UnimplementedLoggerciseServer) mustEmbedUnimplementedLoggerciseServer() {}

// UnsafeLoggerciseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerciseServer will
// result in compilation errors.
type UnsafeLoggerciseServer interface {
	mustEmbedUnimplementedLoggerciseServer()
}

func RegisterLoggerciseServer(s grpc.ServiceRegistrar, srv LoggerciseServer) {
	s.RegisterService(&Loggercise_ServiceDesc, srv)
}

func _Loggercise_UpsertWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).UpsertWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/UpsertWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).UpsertWorkout(ctx, req.(*UpsertWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_GetWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).GetWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/GetWorkouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).GetWorkouts(ctx, req.(*GetWorkoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_DeleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).DeleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/DeleteWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).DeleteWorkout(ctx, req.(*WorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_UpsertExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).UpsertExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/UpsertExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).UpsertExercise(ctx, req.(*UpsertExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_GetExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).GetExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/GetExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).GetExercises(ctx, req.(*WorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/DeleteExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).DeleteExercise(ctx, req.(*ExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_UpsertSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).UpsertSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/UpsertSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).UpsertSet(ctx, req.(*UpsertSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).DeleteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/DeleteSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).DeleteSet(ctx, req.(*DeleteSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_UpsertLift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).UpsertLift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/UpsertLift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).UpsertLift(ctx, req.(*UpsertLiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_GetLifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).GetLifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/GetLifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).GetLifts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loggercise_GetMuscles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerciseServer).GetMuscles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggercise.loggercise/GetMuscles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerciseServer).GetMuscles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Loggercise_ServiceDesc is the grpc.ServiceDesc for Loggercise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loggercise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loggercise.loggercise",
	HandlerType: (*LoggerciseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertWorkout",
			Handler:    _Loggercise_UpsertWorkout_Handler,
		},
		{
			MethodName: "GetWorkouts",
			Handler:    _Loggercise_GetWorkouts_Handler,
		},
		{
			MethodName: "DeleteWorkout",
			Handler:    _Loggercise_DeleteWorkout_Handler,
		},
		{
			MethodName: "UpsertExercise",
			Handler:    _Loggercise_UpsertExercise_Handler,
		},
		{
			MethodName: "GetExercises",
			Handler:    _Loggercise_GetExercises_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _Loggercise_DeleteExercise_Handler,
		},
		{
			MethodName: "UpsertSet",
			Handler:    _Loggercise_UpsertSet_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _Loggercise_DeleteSet_Handler,
		},
		{
			MethodName: "UpsertLift",
			Handler:    _Loggercise_UpsertLift_Handler,
		},
		{
			MethodName: "GetLifts",
			Handler:    _Loggercise_GetLifts_Handler,
		},
		{
			MethodName: "GetMuscles",
			Handler:    _Loggercise_GetMuscles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loggercise.proto",
}
