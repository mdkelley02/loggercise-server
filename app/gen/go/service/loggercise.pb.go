// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: loggercise.proto

package service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{0}
}

type UpsertWorkoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	WorkoutId string `protobuf:"bytes,2,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Notes     string `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	Date      string `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	CreatedAt string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *UpsertWorkoutRequest) Reset() {
	*x = UpsertWorkoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertWorkoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertWorkoutRequest) ProtoMessage() {}

func (x *UpsertWorkoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertWorkoutRequest.ProtoReflect.Descriptor instead.
func (*UpsertWorkoutRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertWorkoutRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpsertWorkoutRequest) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *UpsertWorkoutRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpsertWorkoutRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UpsertWorkoutRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UpsertWorkoutRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GetWorkoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetWorkoutsRequest) Reset() {
	*x = GetWorkoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkoutsRequest) ProtoMessage() {}

func (x *GetWorkoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkoutsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkoutsRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{2}
}

func (x *GetWorkoutsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type WorkoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId string `protobuf:"bytes,2,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
}

func (x *WorkoutRequest) Reset() {
	*x = WorkoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkoutRequest) ProtoMessage() {}

func (x *WorkoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkoutRequest.ProtoReflect.Descriptor instead.
func (*WorkoutRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{3}
}

func (x *WorkoutRequest) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

type UpsertExerciseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId  string         `protobuf:"bytes,1,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	ExerciseId string         `protobuf:"bytes,2,opt,name=exerciseId,proto3" json:"exerciseId,omitempty"`
	Lift       *Lift          `protobuf:"bytes,3,opt,name=lift,proto3" json:"lift,omitempty"`
	Sets       []*ExerciseSet `protobuf:"bytes,4,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *UpsertExerciseRequest) Reset() {
	*x = UpsertExerciseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertExerciseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertExerciseRequest) ProtoMessage() {}

func (x *UpsertExerciseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertExerciseRequest.ProtoReflect.Descriptor instead.
func (*UpsertExerciseRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertExerciseRequest) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *UpsertExerciseRequest) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *UpsertExerciseRequest) GetLift() *Lift {
	if x != nil {
		return x.Lift
	}
	return nil
}

func (x *UpsertExerciseRequest) GetSets() []*ExerciseSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

type ExerciseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId  string `protobuf:"bytes,1,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	ExerciseId string `protobuf:"bytes,2,opt,name=exerciseId,proto3" json:"exerciseId,omitempty"`
}

func (x *ExerciseRequest) Reset() {
	*x = ExerciseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExerciseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExerciseRequest) ProtoMessage() {}

func (x *ExerciseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExerciseRequest.ProtoReflect.Descriptor instead.
func (*ExerciseRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{5}
}

func (x *ExerciseRequest) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *ExerciseRequest) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

type UpsertLiftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiftId       string    `protobuf:"bytes,1,opt,name=liftId,proto3" json:"liftId,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MuscleGroups []*Muscle `protobuf:"bytes,3,rep,name=muscleGroups,proto3" json:"muscleGroups,omitempty"`
}

func (x *UpsertLiftRequest) Reset() {
	*x = UpsertLiftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertLiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertLiftRequest) ProtoMessage() {}

func (x *UpsertLiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertLiftRequest.ProtoReflect.Descriptor instead.
func (*UpsertLiftRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertLiftRequest) GetLiftId() string {
	if x != nil {
		return x.LiftId
	}
	return ""
}

func (x *UpsertLiftRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertLiftRequest) GetMuscleGroups() []*Muscle {
	if x != nil {
		return x.MuscleGroups
	}
	return nil
}

type DeleteSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId  string `protobuf:"bytes,1,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	ExerciseId string `protobuf:"bytes,2,opt,name=exerciseId,proto3" json:"exerciseId,omitempty"`
	SetId      string `protobuf:"bytes,3,opt,name=setId,proto3" json:"setId,omitempty"`
}

func (x *DeleteSetRequest) Reset() {
	*x = DeleteSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSetRequest) ProtoMessage() {}

func (x *DeleteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSetRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSetRequest) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *DeleteSetRequest) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *DeleteSetRequest) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

type UpsertSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId  string       `protobuf:"bytes,1,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	ExerciseId string       `protobuf:"bytes,2,opt,name=exerciseId,proto3" json:"exerciseId,omitempty"`
	SetId      string       `protobuf:"bytes,3,opt,name=setId,proto3" json:"setId,omitempty"`
	Set        *ExerciseSet `protobuf:"bytes,4,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *UpsertSetRequest) Reset() {
	*x = UpsertSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSetRequest) ProtoMessage() {}

func (x *UpsertSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSetRequest.ProtoReflect.Descriptor instead.
func (*UpsertSetRequest) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{8}
}

func (x *UpsertSetRequest) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *UpsertSetRequest) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *UpsertSetRequest) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *UpsertSetRequest) GetSet() *ExerciseSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// responses --------------------------------------------------------------
type WorkoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workouts []*Workout `protobuf:"bytes,1,rep,name=workouts,proto3" json:"workouts,omitempty"`
}

func (x *WorkoutResponse) Reset() {
	*x = WorkoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkoutResponse) ProtoMessage() {}

func (x *WorkoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkoutResponse.ProtoReflect.Descriptor instead.
func (*WorkoutResponse) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{9}
}

func (x *WorkoutResponse) GetWorkouts() []*Workout {
	if x != nil {
		return x.Workouts
	}
	return nil
}

type ExerciseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exercises []*Exercise `protobuf:"bytes,1,rep,name=exercises,proto3" json:"exercises,omitempty"`
}

func (x *ExerciseResponse) Reset() {
	*x = ExerciseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExerciseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExerciseResponse) ProtoMessage() {}

func (x *ExerciseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExerciseResponse.ProtoReflect.Descriptor instead.
func (*ExerciseResponse) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{10}
}

func (x *ExerciseResponse) GetExercises() []*Exercise {
	if x != nil {
		return x.Exercises
	}
	return nil
}

type LiftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lifts []*Lift `protobuf:"bytes,1,rep,name=lifts,proto3" json:"lifts,omitempty"`
}

func (x *LiftResponse) Reset() {
	*x = LiftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiftResponse) ProtoMessage() {}

func (x *LiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiftResponse.ProtoReflect.Descriptor instead.
func (*LiftResponse) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{11}
}

func (x *LiftResponse) GetLifts() []*Lift {
	if x != nil {
		return x.Lifts
	}
	return nil
}

type MusclesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Muscles []*Muscle `protobuf:"bytes,1,rep,name=muscles,proto3" json:"muscles,omitempty"`
}

func (x *MusclesResponse) Reset() {
	*x = MusclesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusclesResponse) ProtoMessage() {}

func (x *MusclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusclesResponse.ProtoReflect.Descriptor instead.
func (*MusclesResponse) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{12}
}

func (x *MusclesResponse) GetMuscles() []*Muscle {
	if x != nil {
		return x.Muscles
	}
	return nil
}

// sub-types ---------------------------------------------------------------
type Muscle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Muscle) Reset() {
	*x = Muscle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Muscle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Muscle) ProtoMessage() {}

func (x *Muscle) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Muscle.ProtoReflect.Descriptor instead.
func (*Muscle) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{13}
}

func (x *Muscle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Muscle) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Lift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiftId       string    `protobuf:"bytes,1,opt,name=liftId,proto3" json:"liftId,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MuscleGroups []*Muscle `protobuf:"bytes,3,rep,name=muscleGroups,proto3" json:"muscleGroups,omitempty"`
}

func (x *Lift) Reset() {
	*x = Lift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lift) ProtoMessage() {}

func (x *Lift) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lift.ProtoReflect.Descriptor instead.
func (*Lift) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{14}
}

func (x *Lift) GetLiftId() string {
	if x != nil {
		return x.LiftId
	}
	return ""
}

func (x *Lift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lift) GetMuscleGroups() []*Muscle {
	if x != nil {
		return x.MuscleGroups
	}
	return nil
}

type ExerciseSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight int32  `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Reps   int32  `protobuf:"varint,2,opt,name=reps,proto3" json:"reps,omitempty"`
	Rpe    int32  `protobuf:"varint,3,opt,name=rpe,proto3" json:"rpe,omitempty"`
	Rest   int32  `protobuf:"varint,4,opt,name=rest,proto3" json:"rest,omitempty"`
	SetId  string `protobuf:"bytes,5,opt,name=setId,proto3" json:"setId,omitempty"`
}

func (x *ExerciseSet) Reset() {
	*x = ExerciseSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExerciseSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExerciseSet) ProtoMessage() {}

func (x *ExerciseSet) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExerciseSet.ProtoReflect.Descriptor instead.
func (*ExerciseSet) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{15}
}

func (x *ExerciseSet) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ExerciseSet) GetReps() int32 {
	if x != nil {
		return x.Reps
	}
	return 0
}

func (x *ExerciseSet) GetRpe() int32 {
	if x != nil {
		return x.Rpe
	}
	return 0
}

func (x *ExerciseSet) GetRest() int32 {
	if x != nil {
		return x.Rest
	}
	return 0
}

func (x *ExerciseSet) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

type Exercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId  string         `protobuf:"bytes,1,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	ExerciseId string         `protobuf:"bytes,2,opt,name=exerciseId,proto3" json:"exerciseId,omitempty"`
	Lift       *Lift          `protobuf:"bytes,3,opt,name=lift,proto3" json:"lift,omitempty"`
	Sets       []*ExerciseSet `protobuf:"bytes,4,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *Exercise) Reset() {
	*x = Exercise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exercise) ProtoMessage() {}

func (x *Exercise) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exercise.ProtoReflect.Descriptor instead.
func (*Exercise) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{16}
}

func (x *Exercise) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *Exercise) GetExerciseId() string {
	if x != nil {
		return x.ExerciseId
	}
	return ""
}

func (x *Exercise) GetLift() *Lift {
	if x != nil {
		return x.Lift
	}
	return nil
}

func (x *Exercise) GetSets() []*ExerciseSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

type Workout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkoutId string      `protobuf:"bytes,1,opt,name=workoutId,proto3" json:"workoutId,omitempty"`
	UserId    string      `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Title     string      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Notes     string      `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	Date      string      `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	CreatedAt string      `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Exercises []*Exercise `protobuf:"bytes,7,rep,name=exercises,proto3" json:"exercises,omitempty"`
}

func (x *Workout) Reset() {
	*x = Workout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggercise_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workout) ProtoMessage() {}

func (x *Workout) ProtoReflect() protoreflect.Message {
	mi := &file_loggercise_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workout.ProtoReflect.Descriptor instead.
func (*Workout) Descriptor() ([]byte, []int) {
	return file_loggercise_proto_rawDescGZIP(), []int{17}
}

func (x *Workout) GetWorkoutId() string {
	if x != nil {
		return x.WorkoutId
	}
	return ""
}

func (x *Workout) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Workout) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Workout) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Workout) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Workout) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Workout) GetExercises() []*Exercise {
	if x != nil {
		return x.Exercises
	}
	return nil
}

var File_loggercise_proto protoreflect.FileDescriptor

var file_loggercise_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x74, 0x12, 0x2b,
	0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x11,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x91, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x53, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65,
	0x74, 0x22, 0x42, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x22, 0x36, 0x0a,
	0x0c, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x6c, 0x69, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x05,
	0x6c, 0x69, 0x66, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x0f, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x6d,
	0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x04, 0x4c, 0x69, 0x66, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c,
	0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e,
	0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x75, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x65, 0x70, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x08,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x07, 0x57, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x52, 0x09, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x32, 0xef, 0x09,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0d,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x12, 0x6a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x7d, 0x12,
	0x8d, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x74, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x12,
	0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2f,
	0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a,
	0x09, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x40, 0x22, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2f, 0x7b, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x49, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x74, 0x49, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2f, 0x7b, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x73, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x65, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x69, 0x66, 0x74, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x66,
	0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x69, 0x66, 0x74, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x4b,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12,
	0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x66, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2e, 0x4d, 0x75, 0x73, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x73, 0x42,
	0x14, 0x5a, 0x12, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_loggercise_proto_rawDescOnce sync.Once
	file_loggercise_proto_rawDescData = file_loggercise_proto_rawDesc
)

func file_loggercise_proto_rawDescGZIP() []byte {
	file_loggercise_proto_rawDescOnce.Do(func() {
		file_loggercise_proto_rawDescData = protoimpl.X.CompressGZIP(file_loggercise_proto_rawDescData)
	})
	return file_loggercise_proto_rawDescData
}

var file_loggercise_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_loggercise_proto_goTypes = []interface{}{
	(*Empty)(nil),                 // 0: loggercise.Empty
	(*UpsertWorkoutRequest)(nil),  // 1: loggercise.UpsertWorkoutRequest
	(*GetWorkoutsRequest)(nil),    // 2: loggercise.GetWorkoutsRequest
	(*WorkoutRequest)(nil),        // 3: loggercise.WorkoutRequest
	(*UpsertExerciseRequest)(nil), // 4: loggercise.UpsertExerciseRequest
	(*ExerciseRequest)(nil),       // 5: loggercise.ExerciseRequest
	(*UpsertLiftRequest)(nil),     // 6: loggercise.UpsertLiftRequest
	(*DeleteSetRequest)(nil),      // 7: loggercise.DeleteSetRequest
	(*UpsertSetRequest)(nil),      // 8: loggercise.UpsertSetRequest
	(*WorkoutResponse)(nil),       // 9: loggercise.WorkoutResponse
	(*ExerciseResponse)(nil),      // 10: loggercise.ExerciseResponse
	(*LiftResponse)(nil),          // 11: loggercise.LiftResponse
	(*MusclesResponse)(nil),       // 12: loggercise.MusclesResponse
	(*Muscle)(nil),                // 13: loggercise.Muscle
	(*Lift)(nil),                  // 14: loggercise.Lift
	(*ExerciseSet)(nil),           // 15: loggercise.ExerciseSet
	(*Exercise)(nil),              // 16: loggercise.Exercise
	(*Workout)(nil),               // 17: loggercise.Workout
}
var file_loggercise_proto_depIdxs = []int32{
	14, // 0: loggercise.UpsertExerciseRequest.lift:type_name -> loggercise.Lift
	15, // 1: loggercise.UpsertExerciseRequest.sets:type_name -> loggercise.ExerciseSet
	13, // 2: loggercise.UpsertLiftRequest.muscleGroups:type_name -> loggercise.Muscle
	15, // 3: loggercise.UpsertSetRequest.set:type_name -> loggercise.ExerciseSet
	17, // 4: loggercise.WorkoutResponse.workouts:type_name -> loggercise.Workout
	16, // 5: loggercise.ExerciseResponse.exercises:type_name -> loggercise.Exercise
	14, // 6: loggercise.LiftResponse.lifts:type_name -> loggercise.Lift
	13, // 7: loggercise.MusclesResponse.muscles:type_name -> loggercise.Muscle
	13, // 8: loggercise.Lift.muscleGroups:type_name -> loggercise.Muscle
	14, // 9: loggercise.Exercise.lift:type_name -> loggercise.Lift
	15, // 10: loggercise.Exercise.sets:type_name -> loggercise.ExerciseSet
	16, // 11: loggercise.Workout.exercises:type_name -> loggercise.Exercise
	1,  // 12: loggercise.loggercise.UpsertWorkout:input_type -> loggercise.UpsertWorkoutRequest
	2,  // 13: loggercise.loggercise.GetWorkouts:input_type -> loggercise.GetWorkoutsRequest
	3,  // 14: loggercise.loggercise.DeleteWorkout:input_type -> loggercise.WorkoutRequest
	4,  // 15: loggercise.loggercise.UpsertExercise:input_type -> loggercise.UpsertExerciseRequest
	3,  // 16: loggercise.loggercise.GetExercises:input_type -> loggercise.WorkoutRequest
	5,  // 17: loggercise.loggercise.DeleteExercise:input_type -> loggercise.ExerciseRequest
	8,  // 18: loggercise.loggercise.UpsertSet:input_type -> loggercise.UpsertSetRequest
	7,  // 19: loggercise.loggercise.DeleteSet:input_type -> loggercise.DeleteSetRequest
	6,  // 20: loggercise.loggercise.UpsertLift:input_type -> loggercise.UpsertLiftRequest
	0,  // 21: loggercise.loggercise.GetLifts:input_type -> loggercise.Empty
	0,  // 22: loggercise.loggercise.GetMuscles:input_type -> loggercise.Empty
	9,  // 23: loggercise.loggercise.UpsertWorkout:output_type -> loggercise.WorkoutResponse
	9,  // 24: loggercise.loggercise.GetWorkouts:output_type -> loggercise.WorkoutResponse
	9,  // 25: loggercise.loggercise.DeleteWorkout:output_type -> loggercise.WorkoutResponse
	10, // 26: loggercise.loggercise.UpsertExercise:output_type -> loggercise.ExerciseResponse
	10, // 27: loggercise.loggercise.GetExercises:output_type -> loggercise.ExerciseResponse
	10, // 28: loggercise.loggercise.DeleteExercise:output_type -> loggercise.ExerciseResponse
	0,  // 29: loggercise.loggercise.UpsertSet:output_type -> loggercise.Empty
	0,  // 30: loggercise.loggercise.DeleteSet:output_type -> loggercise.Empty
	11, // 31: loggercise.loggercise.UpsertLift:output_type -> loggercise.LiftResponse
	11, // 32: loggercise.loggercise.GetLifts:output_type -> loggercise.LiftResponse
	12, // 33: loggercise.loggercise.GetMuscles:output_type -> loggercise.MusclesResponse
	23, // [23:34] is the sub-list for method output_type
	12, // [12:23] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_loggercise_proto_init() }
func file_loggercise_proto_init() {
	if File_loggercise_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_loggercise_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertWorkoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertExerciseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExerciseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertLiftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExerciseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusclesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Muscle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExerciseSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exercise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggercise_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_loggercise_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_loggercise_proto_goTypes,
		DependencyIndexes: file_loggercise_proto_depIdxs,
		MessageInfos:      file_loggercise_proto_msgTypes,
	}.Build()
	File_loggercise_proto = out.File
	file_loggercise_proto_rawDesc = nil
	file_loggercise_proto_goTypes = nil
	file_loggercise_proto_depIdxs = nil
}
